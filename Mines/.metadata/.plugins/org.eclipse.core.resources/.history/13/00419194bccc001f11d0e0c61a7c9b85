package com.data.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.data.entiy.Cell;
import com.data.entiy.Mine;
import com.data.repository.Mrepo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Random;

@Service
public class MService {

    private static final Logger log = LoggerFactory.getLogger(MService.class);

    @Autowired
    private Mrepo gameRepository;

    /**
     * Creates a new game with a grid of 25 cells and places 3 diamonds randomly.
     * @return the created game
     */
    public Mine createGame() {
        List<Cell> grid = new ArrayList<>();
        for (int i = 0; i < 25; i++) {
            grid.add(new Cell());
        }

        // Place diamonds at random positions
        placeDiamonds(grid, 3);

        Mine game = new Mine();
        game.setGrid(grid);
        game.setDiamondsFound(0); // Initially no diamonds found
        game.setPoints(0); // Initially no points
        game.setGameOver(false); // Game is not over at the start
        log.info("New game created with 3 diamonds hidden.");
        return gameRepository.save(game);
    }

    /**
     * Places a specified number of diamonds at random positions in the grid.
     * @param grid the list of cells
     * @param diamondCount the number of diamonds to place
     */
    private void placeDiamonds(List<Cell> grid, int diamondCount) {
        Random random = new Random();
        List<Integer> positions = new ArrayList<>();
        for (int i = 0; i < grid.size(); i++) {
            positions.add(i);
        }

        Collections.shuffle(positions);  // Shuffle to randomize positions

        for (int i = 0; i < diamondCount; i++) {
            grid.get(positions.get(i)).setHasDiamond(true);
        }
        log.info("Diamonds placed at random positions.");
    }

    /**
     * Reveals a cell in the game.
     * @param gameId the game ID
     * @param row the row index
     * @param col the column index
     * @return the updated game
     * @throws IllegalArgumentException if the cell position is invalid
     */
    public Mine revealCell(String gameId, int row, int col) {
        log.info("Revealing cell at row: {}, col: {} for gameId: {}", row, col, gameId);

        // Retrieve game by ID
        Mine game = gameRepository.findById(gameId)
                .orElseThrow(() -> new RuntimeException("Game with ID " + gameId + " not found"));

        int cellIndex = row * 5 + col;  // Assuming grid size is 5x5
        if (cellIndex < 0 || cellIndex >= game.getGrid().size()) {
            throw new IllegalArgumentException("Invalid cell position");
        }

        // Get the cell and check if it is already revealed
        Cell cell = game.getGrid().get(cellIndex);
        if (cell.isRevealed()) {
            throw new RuntimeException("Cell already revealed");
        }

        // Reveal the cell
        cell.setRevealed(true);

        // If a diamond is found, update the game state
        if (cell.isHasDiamond()) {
            game.setDiamondsFound(game.getDiamondsFound() + 1);
            game.setPoints(game.getPoints() + 10);  // Add points for finding a diamond
            log.info("Diamond found! Points updated to: {}", game.getPoints());
        }

        // If all diamonds are found, mark the game as over
        if (game.getDiamondsFound() == 3) {
            game.setGameOver(true);
            log.info("Game over! All diamonds found.");
        }

        // Save the updated game and return it
        return gameRepository.save(game);
    }

    /**
     * Retrieves the grid of cells for a specific game.
     * @param gameId the game ID
     * @return the grid of cells
     */
    public List<Cell> getGrid(String gameId) {
        log.info("Fetching grid for gameId: {}", gameId);

        // Retrieve game by ID
        Mine game = gameRepository.findById(gameId)
                .orElseThrow(() -> new RuntimeException("Game with ID " + gameId + " not found"));

        return game.getGrid();
    }

    /**
     * Retrieves the positions of the diamonds in the game grid.
     * @param gameId the game ID
     * @return a list of indices where diamonds are located
     */
    public List<Integer> getDiamondLocations(String gameId) {
        Mine game = gameRepository.findById(gameId)
                .orElseThrow(() -> new RuntimeException("Game not found"));

        List<Integer> diamondIndices = new ArrayList<>();
        List<Cell> grid = game.getGrid();

        // Loop through grid and collect indices of cells with diamonds
        for (int i = 0; i < grid.size(); i++) {
            if (grid.get(i).isHasDiamond()) {
                diamondIndices.add(i);
            }
        }

        return diamondIndices;
    }
}
